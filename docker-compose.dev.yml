services:
    proxy:
        image: nginx:1.24.0-alpine
        container_name: proxy
        hostname: proxy
        volumes:
            - ./proxy/nginx.dev.conf:/etc/nginx/nginx.conf
        command: /bin/sh -c "nginx -g 'daemon off;'"
        ports:
            - "${PROXY_PORT_HTTP}:80"
            - "${PROXY_PORT_HTTPS}:443"
        depends_on:
            - server
            - client
        restart: unless-stopped
        networks:
            - app

    client:
        container_name: client
        hostname: client
        build:
            context: '.'
            dockerfile: ./client/docker/Dockerfile
            target: dev
        volumes:
            - ./client:/app
            - /app/node_modules
        environment:
            port: ${CLIENT_DEV_PORT}
        ports:
            - "${CLIENT_DEV_PORT}:${CLIENT_DEV_PORT}"
        depends_on:
            - server
        restart: unless-stopped
        networks:
            - app

    server:
        container_name: server
        hostname: server
        build:
            context: '.'
            dockerfile: ./server/Dockerfile
            target: dev
        volumes:
            - ./server:/app
        environment:
            PORT: ${SERVER_PORT}
            DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
            JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET}
            JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
        command: ["npm", "run", "start:dev"]
        ports:
            - "${SERVER_PORT}:${SERVER_PORT}"
        depends_on:
            postgres:
                condition: service_healthy
        restart: always
        networks:
            - app

    pgadmin:
        image: dpage/pgadmin4:8.14.0
        container_name: pgadmin
        depends_on:
            - postgres
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
            PGADMIN_DEFAULT_PASSWORD: ${POSTGRES_PASSWORD}
            PGADMIN_CONFIG_SERVER_MODE: 'False'
        volumes:
            - ./pgadmin:/var/lib/pgadmin
        ports:
            - ${PGADMIN_PORT:-8050}:80
        networks:
            - app
        restart: unless-stopped

    postgres:
        image: postgres:16-alpine
        container_name: postgres
        hostname: postgres
        shm_size: 128mb
        volumes:
            - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
            - ./postgres/dumps:/docker-entrypoint-initdb.d/dumps
            - ${POSTGRES_DATA_PATH}:/var/lib/postgresql/data/:rw
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
            PGDATA: /var/lib/postgresql/data/
        ports:
            - ${POSTGRES_PORT:-8432}:5432
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U postgres -d chat" ]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 10s
        restart: unless-stopped
        deploy:
            resources:
                limits:
                    cpus: '1'
                    memory: 4G
        networks:
            - app

networks:
    app:
        driver: bridge

volumes:
    pgadmin:
        external: false
    postgres:
        external: false
    server:
        external: false
    client:
        external: false
    proxy:
        external: false